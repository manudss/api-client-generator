{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Dbmrest APIs Documentation"
  },
  "host": "electron.test-pxp.frec.bull.fr:8085",
  "basePath": "/dbmrest_develop",
  "tags": [
    {
      "name": "_guideline_management",
      "description": "Guideline Mng View"
    },
    {
      "name": "accountlinkings",
      "description": "Account Linking View"
    },
    {
      "name": "certificateauthorities",
      "description": "Cert Authority View"
    },
    {
      "name": "characterssets",
      "description": "Chars Set View"
    },
    {
      "name": "consents",
      "description": "Consent View"
    },
    {
      "name": "directories",
      "description": "User Directory View"
    },
    {
      "name": "euacustomizations",
      "description": "Eua Customization View"
    },
    {
      "name": "googleanalytics",
      "description": "Google Analytics View"
    },
    {
      "name": "guideline",
      "description": "Guideline View"
    },
    {
      "name": "lpfauthenticationpolicy",
      "description": "Auth Policy View"
    },
    {
      "name": "lpfpxpauthenticationserver",
      "description": "Pxp Auth Server View"
    },
    {
      "name": "lpfsamldomain",
      "description": "Saml Domain View"
    },
    {
      "name": "lpfuserprofile",
      "description": "User Profile View"
    },
    {
      "name": "passwordpolicies",
      "description": "Password Policy View"
    },
    {
      "name": "passwordqualities",
      "description": "Password Quality View"
    },
    {
      "name": "passwordreset",
      "description": "Password Reset View"
    },
    {
      "name": "samldata",
      "description": "Data View"
    },
    {
      "name": "selfregistrations",
      "description": "Self Registration View"
    },
    {
      "name": "socialauthservers",
      "description": "Social Auth Server View"
    },
    {
      "name": "users",
      "description": "User View"
    }
  ],
  "paths": {
    "/wam/v1/_guideline_management": {
      "get": {
        "tags": [
          "_guideline_management"
        ],
        "summary": "Retrieve last version of guidelines into server repository",
        "operationId": "retriveGuidelinesIntoRepositoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DefaultResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/_guideline_management/{folder}/{name}": {
      "post": {
        "tags": [
          "_guideline_management"
        ],
        "summary": "Create a new Guideline (summary and details)",
        "description": "Create a new Guideline",
        "operationId": "createGuidelineUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Guideline"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "description": "Path parameter to specify the folder name",
            "required": true,
            "type": "string",
            "x-example": "saml"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Path parameter to specify the file name",
            "required": true,
            "type": "string",
            "x-example": "Saleforce"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidelineMngResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidelineMngResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "_guideline_management"
        ],
        "summary": "Delete one existing guideline (summary and details)",
        "operationId": "deleteGuidelineUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "folder",
            "in": "path",
            "description": "Path parameter to specify the folder name",
            "required": true,
            "type": "string",
            "x-example": "saml"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Path parameter to specify the file name",
            "required": true,
            "type": "string",
            "x-example": "Saleforce"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/accountlinkings": {
      "get": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Returns all Account Linking objects",
        "description": "Returns all Account Linking objects",
        "operationId": "getAllAccountLinkingUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountLinkingResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/accountlinkings/default": {
      "get": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Returns default Account Linking",
        "description": "Returns default Account Linking (currently, the default Account Linking is \"Default Account Linking configuration\")",
        "operationId": "getDefaultAccountLinkingUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountLinkingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Update default Account Linking object",
        "description": "Update default Account Linking object (currently, the default Account Linking is \"Default Account Linking configuration\")",
        "operationId": "updateDefaultAccountLinkingUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountLinkingInput",
            "description": "accountLinkingInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountLinking"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountLinkingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/accountlinkings/default/socialauthservers": {
      "get": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Returns all available Social Auth Servers for default Account Linking",
        "description": "Returns all available Social Auth Servers for default Account Linking (currently, the default Account Linking is \"Default Account Linking configuration\")",
        "operationId": "getSocialAuthServersForDefaultAccountLinkingUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/accountlinkings/{accountLinkingName}": {
      "get": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Returns specific Account Linking",
        "description": "Returns specific Account Linking",
        "operationId": "getSpecificAccountLinkingUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "accountLinkingName",
            "in": "path",
            "description": "Specific AccountLinking",
            "required": true,
            "type": "string",
            "x-example": "lpfAccountLinking"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountLinkingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Update specific Account Linking object",
        "description": "Update specific Account Linking object",
        "operationId": "updateSpecificAccountLinkingUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountLinkingInput",
            "description": "accountLinkingInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountLinking"
            }
          },
          {
            "name": "accountLinkingName",
            "in": "path",
            "description": "Specific Account Linking",
            "required": true,
            "type": "string",
            "x-example": "lpfAccountLinking"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountLinkingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/accountlinkings/{accountLinkingName}/socialauthservers": {
      "get": {
        "tags": [
          "accountlinkings"
        ],
        "summary": "Returns Social Auth Servers for specific Account Linking",
        "description": "Returns Social Auth Servers for specific Account Linking",
        "operationId": "getSocialAuthServersForSpecificAccountLinkingUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "accountLinkingName",
            "in": "path",
            "description": "Specific Account Linking",
            "required": true,
            "type": "string",
            "x-example": "lpfAccountLinking"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/certificateauthorities": {
      "get": {
        "tags": [
          "certificateauthorities"
        ],
        "summary": "Returns all Certificate Authorities",
        "description": "Returns all Certificate Authorities",
        "operationId": "getAllCertificateAuthoritiesUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertAuthorityResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/characterssets": {
      "get": {
        "tags": [
          "characterssets"
        ],
        "summary": "Returns all Characters Set objects",
        "description": "Returns all Characters Set objects",
        "operationId": "getAllCharsSetsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CharsSetResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/consents": {
      "get": {
        "tags": [
          "consents"
        ],
        "summary": "Returns all Consents",
        "description": "Returns all Consents",
        "operationId": "getAllConsentsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "consents"
        ],
        "summary": "Create a new Consent",
        "description": "Create a new Consent",
        "operationId": "createConsentUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "consent",
            "description": "consent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Consent"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "consents"
        ],
        "summary": "Update a Consent",
        "description": "Update a Consent",
        "operationId": "updateConsentUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "consent",
            "description": "consent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Consent"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/consents/default": {
      "get": {
        "tags": [
          "consents"
        ],
        "summary": "Returns default Consent",
        "description": "Returns default Consent (currently, the default Consent is \"Default consent for terms of services\")",
        "operationId": "getDefaultConsentUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/consents/{consentName}": {
      "get": {
        "tags": [
          "consents"
        ],
        "summary": "Returns specific Consent",
        "description": "Returns specific Consent",
        "operationId": "getSpecificConsentUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "consentName",
            "in": "path",
            "description": "Specific Consent",
            "required": true,
            "type": "string",
            "x-example": "lpfDefaultConsent"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/consents/{consentsName}/": {
      "delete": {
        "tags": [
          "consents"
        ],
        "summary": "Delete an Consent",
        "operationId": "deleteConsentsUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "consentsName",
            "in": "path",
            "description": "Path parameter to specify the Consent name",
            "required": true,
            "type": "string",
            "x-example": "lpfDefaultConsent"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/directories/default": {
      "get": {
        "tags": [
          "directories"
        ],
        "summary": "Returns default directory information",
        "description": "Returns default directory information (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "getDefaultUserDirectoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDirectoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "directories"
        ],
        "summary": "Updates information in default directory",
        "description": "Updates information in default directory (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "updateDefaultUserDirectoryUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "userDirectory",
            "description": "JSON resource to update information in default directory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDirectory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDirectoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/directories/{directory}": {
      "get": {
        "tags": [
          "directories"
        ],
        "summary": "Returns specific directory information",
        "description": "Returns specific directory information",
        "operationId": "getSpecificUserDirectoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Directory to get the permissions",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDirectoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "directories"
        ],
        "summary": "Updates information in specific directory",
        "description": "Updates information in specific directory",
        "operationId": "updateSpecificUserDirectoryUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Directory to get the permissions",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "in": "body",
            "name": "userDirectory",
            "description": "JSON resource to update information in specific directory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDirectory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDirectoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/euacustomizations": {
      "get": {
        "tags": [
          "euacustomizations"
        ],
        "summary": "Returns all Eua Customizations",
        "description": "Get the list of all Eua Customization. ",
        "operationId": "getAllEuaCustomizationsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "Query parameter to return filtered result",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "Query parameter to return only specific fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EuaCustomizationResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/euacustomizations/default": {
      "get": {
        "tags": [
          "euacustomizations"
        ],
        "summary": "Returns default Eua Customization",
        "description": "Get the default Eua Customization (if it contains \"Default\" in its name)",
        "operationId": "getDefaultEuaCustomizationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EuaCustomizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "euacustomizations"
        ],
        "summary": "Updates an Eua Customization",
        "operationId": "updateEuaCustomizationUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "lpfEuaCustomization",
            "description": "The JSON resource to be used for the eua customization update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EuaCustomization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EuaCustomizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/euacustomizations/{euaCustomizationName}": {
      "get": {
        "tags": [
          "euacustomizations"
        ],
        "summary": "Returns the Eua Customization by name",
        "description": "Get the defined Eua Customization. ",
        "operationId": "getEuaCustomizationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "euaCustomizationName",
            "in": "path",
            "description": "Path parameter to specify the eua customization to be returned",
            "required": true,
            "type": "string",
            "x-example": "lpfEuaCustomization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EuaCustomizationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/googleanalytics": {
      "get": {
        "tags": [
          "googleanalytics"
        ],
        "summary": "Returns all Google Analytics objects",
        "description": "Returns all Google Analytics objects",
        "operationId": "getAllGoogleAnalyticsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoogleAnalyticsResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "googleanalytics"
        ],
        "summary": "Create a new Google Analytics object",
        "description": "Create a new Google Analytics object",
        "operationId": "createGoogleAnalyticsUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "googleAnalytics",
            "description": "googleAnalytics",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoogleAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoogleAnalyticsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "googleanalytics"
        ],
        "summary": "Update a Google Analytics object",
        "description": "Update a Google Analytics object",
        "operationId": "updateGoogleAnalyticsUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "googleAnalytics",
            "description": "googleAnalytics",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoogleAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoogleAnalyticsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/googleanalytics/{googleAnalyticsName}": {
      "get": {
        "tags": [
          "googleanalytics"
        ],
        "summary": "Returns specific Google Analytics object",
        "description": "Returns specific Google Analytics object",
        "operationId": "getSpecificGoogleAnalyticsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "googleAnalyticsName",
            "in": "path",
            "description": "Specific Google Analytics",
            "required": true,
            "type": "string",
            "x-example": "lpfGoogleAnalytics"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoogleAnalyticsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "googleanalytics"
        ],
        "summary": "Delete a Google Analytics object",
        "operationId": "deleteGoogleAnalyticssUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "googleAnalyticsName",
            "in": "path",
            "description": "Path parameter to specify the Google Analytics object name",
            "required": true,
            "type": "string",
            "x-example": "Google analytics name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/guideline/{folder}/all": {
      "get": {
        "tags": [
          "guideline"
        ],
        "summary": "Returns all guidelines summaries from folder",
        "operationId": "getGuidelinesFromFolderAllUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "folder",
            "in": "path",
            "description": "Path parameter to specify the folder name",
            "required": true,
            "type": "string",
            "x-example": "saml"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidelineResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/guideline/{folder}/{name}": {
      "get": {
        "tags": [
          "guideline"
        ],
        "summary": "Returns guideline details from folder",
        "operationId": "getGuidelineFromFolderByNameUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "folder",
            "in": "path",
            "description": "Path parameter to specify the folder name",
            "required": true,
            "type": "string",
            "x-example": "saml"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Path parameter to specify the file name",
            "required": true,
            "type": "string",
            "x-example": "Saleforce"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidelineResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfauthenticationpolicy": {
      "get": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Returns all Auth Policy objects",
        "description": "Returns all Auth Policy objects",
        "operationId": "getAuthPolicysUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthPolicyResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Create a new Auth Policy",
        "description": "Create a new Auth Policy",
        "operationId": "createAuthPolicyUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthPolicyResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AuthPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Update an Auth Policy",
        "description": "Update an Auth Policy",
        "operationId": "updateAuthPolicyUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Delete multiple existing Auth Policy",
        "operationId": "deleteMultipleAuthPolicysUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "authPolicies",
            "in": "query",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "lpfTestAuthPolicy1, lpfTestAuthPolicy2"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfauthenticationpolicy/{lpfAuthPolicyPKValue}": {
      "get": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Returns specific Auth Policy",
        "description": "Returns specific Auth Policy",
        "operationId": "getAuthPolicyByCnUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfAuthPolicyPKValue",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfDefaultAuthPolicy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfauthenticationpolicy"
        ],
        "summary": "Delete an existing Auth Policy",
        "operationId": "deleteAuthPolicyUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "lpfAuthPolicyPKValue",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfTestAuthPolicy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfpxpauthenticationserver": {
      "get": {
        "tags": [
          "lpfpxpauthenticationserver"
        ],
        "summary": "Returns all Pxp Authentication Server objects",
        "description": "Returns all Pxp Authentication Server objects",
        "operationId": "getPxpAuthServersUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PxpAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfpxpauthenticationserver/{lpfPxpAuthServerPKValue}": {
      "get": {
        "tags": [
          "lpfpxpauthenticationserver"
        ],
        "summary": "Returns specific Pxp Authentication Server",
        "description": "Returns specific Pxp Authentication Server",
        "operationId": "getOnePxpAuthServerUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfPxpAuthServerPKValue",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "Built-in Authentication Server"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PxpAuthServerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfsamldomain": {
      "get": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Returns all Saml Domains objects",
        "description": "Returns all Saml Domains objects",
        "operationId": "getSamlDomainsUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Create a new saml domain",
        "description": "Create a new saml domain",
        "operationId": "createSamlDomainUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SamlDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Update a saml domain",
        "description": "Update a saml domain",
        "operationId": "updateSamlDomainUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SamlDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Delete multiple existing Saml Domains",
        "operationId": "deleteMultipleSamlDomainsUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "samlDomains",
            "in": "query",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "lpfTestSamlDomain1, lpfTestSamlDomain2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfsamldomain/{lpfSamlDomainPKValue}": {
      "get": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Returns specific Saml Domain",
        "description": "Returns specific Saml Domain",
        "operationId": "getSamlDomainByCnUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfSamlDomainPKValue",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfDefaultSamlDomain"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfsamldomain"
        ],
        "summary": "Delete an existing Saml Domain",
        "operationId": "deleteSamlDomainUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "lpfSamlDomainPKValue",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfTestSamlDomain"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfuserprofile": {
      "get": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Returns all user profiles",
        "description": "Returns all user profiles",
        "operationId": "getUserProfilesUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserProfileResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Create a new user profile",
        "description": "Create a new user profile",
        "operationId": "createUserProfileUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "user",
            "description": "The JSON resource to be used for the lpf obj creation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Update a user profile",
        "description": "Update a user profile",
        "operationId": "updateUserProfileUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "userProf",
            "description": "The JSON resource to be used for the user profile update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Delete multiple existing user profiles",
        "operationId": "deleteMultipleUserProfilesUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "userProfiles",
            "in": "query",
            "description": "Path parameter to specify the id of user profile to be affected",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "lpfTestUserProfile1, lpfTestUserProfile2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/lpfuserprofile/{lpfUserProfilePKValue}": {
      "get": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Returns one user profile",
        "description": "Returns one user profile",
        "operationId": "getOneUserProfileUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfUserProfilePKValue",
            "in": "path",
            "description": "Path parameter to specify the id of user profile to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfDefaultUserProfile"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "lpfuserprofile"
        ],
        "summary": "Delete an existing user profile",
        "operationId": "deleteUserProfileUsingDELETE",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "lpfUserProfilePKValue",
            "in": "path",
            "description": "Path parameter to specify the id of user profile to be affected",
            "required": true,
            "type": "string",
            "x-example": "lpfTestUserProfile"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordpolicies": {
      "get": {
        "tags": [
          "passwordpolicies"
        ],
        "summary": "Returns all Password Policy objects",
        "description": "Returns all Password Policy objects",
        "operationId": "getAllPasswordPoliciesUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicyResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordpolicies/default": {
      "get": {
        "tags": [
          "passwordpolicies"
        ],
        "summary": "Returns default Password Policy",
        "description": "Returns default Password Policy (currently, the default Password Policy is \"Built-in Password Policy\")",
        "operationId": "getDefaultPasswordPolicyUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "passwordpolicies"
        ],
        "summary": "Update default Password Policy object",
        "description": "Update default Password Policy object (currently, the default Password Policy is \"Built-in Password Policy\")",
        "operationId": "updateDefaultPasswordPolicyUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "PasswordPolicyInput",
            "description": "PasswordPolicyInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordPolicy"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordpolicies/{passwordPolicyName}": {
      "get": {
        "tags": [
          "passwordpolicies"
        ],
        "summary": "Returns specific Password Policy",
        "description": "Returns specific Password Policy",
        "operationId": "getSpecificPasswordPolicyUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "passwordPolicyName",
            "in": "path",
            "description": "Specific Password Policy",
            "required": true,
            "type": "string",
            "x-example": "Built-in Password Policy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "passwordpolicies"
        ],
        "summary": "Update specific Password Policy object",
        "description": "Update specific Password Policy object (currently, the default Password Policy is \"Built-in Password Policy\")",
        "operationId": "updateSpecificPasswordPolicyUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "passwordPolicyInput",
            "description": "passwordPolicyInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordPolicy"
            }
          },
          {
            "name": "passwordPolicyName",
            "in": "path",
            "description": "Specific Password Policy",
            "required": true,
            "type": "string",
            "x-example": "Built-in Password Policy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordqualities": {
      "get": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Returns all Password Quality objects",
        "description": "Returns all Password Quality objects",
        "operationId": "getAllPasswordQualitiesUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordQualityResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordqualities/default": {
      "get": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Returns default Password Quality",
        "description": "Returns default Password Quality (currently, the default Password Quality is \"Built-in Password Quality\")",
        "operationId": "getDefaultPasswordQualityUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordQualityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Update default Password Quality object",
        "description": "Update default Password Quality object (currently, the default Password Quality is \"Built-in Password Quality\")",
        "operationId": "updateDefaultPasswordQualityUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "passwordQualityInput",
            "description": "passwordQualityInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordQuality"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordQualityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordqualities/default/charsset": {
      "get": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Returns all available Characters Sets for default Password Quality",
        "description": "Returns all available Characters Sets for default Password Quality (currently, the default Password Quality is \"Built-in Password Quality\")",
        "operationId": "getCharsSetsForDefaultPasswordQualityUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CharsSetResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordqualities/{passwordQualityName}": {
      "get": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Returns specific Password Quality",
        "description": "Returns specific Password Quality",
        "operationId": "getSpecificPasswordQualityUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "passwordQualityName",
            "in": "path",
            "description": "Specific Password Quality",
            "required": true,
            "type": "string",
            "x-example": "Built-in Password Quality"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordQualityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Update specific Password Quality object",
        "description": "Update specific Password Quality object (currently, the default Password Quality is \"Built-in Password Quality\")",
        "operationId": "updateSpecificPasswordQualityUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "passwordQualityInput",
            "description": "passwordQualityInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordQuality"
            }
          },
          {
            "name": "passwordQualityName",
            "in": "path",
            "description": "Specific Password Quality",
            "required": true,
            "type": "string",
            "x-example": "Built-in Password Quality"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordQualityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordqualities/{passwordQualityName}/charsset": {
      "get": {
        "tags": [
          "passwordqualities"
        ],
        "summary": "Returns all available Characters Sets for specific Password Quality",
        "description": "Returns all available Characters Sets for specific Password Quality",
        "operationId": "getCharsSetsForSpecificPasswordQualityUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "passwordQualityName",
            "in": "path",
            "description": "Specific Password Quality",
            "required": true,
            "type": "string",
            "x-example": "Built-in Password Quality"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CharsSetResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/passwordreset": {
      "get": {
        "tags": [
          "passwordreset"
        ],
        "summary": "Returns Password Reset",
        "description": "Returns Password Reset",
        "operationId": "getPasswordResetUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordResetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "passwordreset"
        ],
        "summary": "Updates Password Reset",
        "description": "Updates Password Reset",
        "operationId": "updatePasswordResetUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "passwordResetInput",
            "description": "passwordResetInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordResetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/samldata/default": {
      "get": {
        "tags": [
          "samldata"
        ],
        "summary": "Returns Saml Data objects",
        "description": "Returns Saml Data objects",
        "operationId": "getIdpDataByKeysUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Query parameter to return only specific keys",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConfigDataResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/samldata/default/{configName}": {
      "post": {
        "tags": [
          "samldata"
        ],
        "summary": "Create a new Saml domain with SP metadata",
        "description": "Create a new Saml domain with SP metadata",
        "operationId": "createSamlDomainBySPMetadataUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "configDataJson",
            "description": "configDataJson",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configName",
            "in": "path",
            "description": "Path parameter to specify the id of lpf obj to be affected",
            "required": true,
            "type": "string",
            "x-example": "SamlDomainSPSalesforce"
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SamlDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns all Self Registration objects",
        "description": "Returns all Self Registration objects",
        "operationId": "getAllSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SelfRegistrationResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/default": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns default Self Registration",
        "description": "Returns default Self Registration (currently, the default Self Registration is \"Default Self Registration\")",
        "operationId": "getDefaultSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SelfRegistrationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Update default Self Registration object",
        "description": "Update default Self Registration object (currently, the default Self Registration is \"Default Self Registration\")",
        "operationId": "updateDefaultSelfRegistrationUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "selfRegistrationInput",
            "description": "selfRegistrationInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelfRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SelfRegistrationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/default/certificateauthorities": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns all available Certificate Authorities for default Self Registration",
        "description": "Returns all available Certificate Authorities for default Self Registration (currently, the default Self Registration is \"Default Self Registration\")",
        "operationId": "getCertificateAuthoritiesForDefaultSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertAuthorityResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/default/socialauthservers": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns all available Social Auth Servers for default Self Registration",
        "description": "Returns all available Social Auth Servers for default Self Registration (currently, the default Self Registration is \"Default Self Registration\")",
        "operationId": "getSocialAuthServersForDefaultSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/{selfRegistrationName}": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns specific Self Registration",
        "description": "Returns specific Self Registration",
        "operationId": "getSpecificSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "selfRegistrationName",
            "in": "path",
            "description": "Specific Self Registration",
            "required": true,
            "type": "string",
            "x-example": "lpfSelfRegistration"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SelfRegistrationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Update specific Self Registration object",
        "description": "Update specific Self Registration object",
        "operationId": "updateSpecificSelfRegistrationUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "selfRegistrationInput",
            "description": "selfRegistrationInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelfRegistration"
            }
          },
          {
            "name": "selfRegistrationName",
            "in": "path",
            "description": "Specific Self Registration",
            "required": true,
            "type": "string",
            "x-example": "lpfSelfRegistration"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SelfRegistrationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/{selfRegistrationName}/certificateauthorities": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns Certificate Authorities for specific Self Registration",
        "description": "Returns Certificate Authorities for specific Self Registration",
        "operationId": "getCertificateAuthoritiesForSpecificSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "selfRegistrationName",
            "in": "path",
            "description": "Specific Self Registration",
            "required": true,
            "type": "string",
            "x-example": "lpfSelfRegistration"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertAuthorityResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/selfregistrations/{selfRegistrationName}/socialauthservers": {
      "get": {
        "tags": [
          "selfregistrations"
        ],
        "summary": "Returns Social Auth Servers for specific Self Registration",
        "description": "Returns Social Auth Servers for specific Self Registration",
        "operationId": "getSocialAuthServersForSpecificSelfRegistrationUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "selfRegistrationName",
            "in": "path",
            "description": "Specific Self Registration",
            "required": true,
            "type": "string",
            "x-example": "lpfSelfRegistration"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/socialauthservers": {
      "get": {
        "tags": [
          "socialauthservers"
        ],
        "summary": "Returns all Social Authentication Servers",
        "description": "Returns all Social Authentication Servers",
        "operationId": "getAllSocialAuthServersUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/socialauthservers/{socialAuthServerName}": {
      "get": {
        "tags": [
          "socialauthservers"
        ],
        "summary": "Returns one Social Authentication Server",
        "description": "Returns one Social Authentication Servers",
        "operationId": "getSocialAuthServerUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "socialAuthServerName",
            "in": "path",
            "description": "Social Auth Server name",
            "required": true,
            "type": "string",
            "x-example": "Facebook"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "socialauthservers"
        ],
        "summary": "Update specific Social Auth Server object",
        "description": "Social Auth Server object",
        "operationId": "updateSocialAuthServerUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "socialAuthServerInput",
            "description": "socialAuthServerInput",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SocialAuthServer"
            }
          },
          {
            "name": "socialAuthServerName",
            "in": "path",
            "description": "Social Auth Server name",
            "required": true,
            "type": "string",
            "x-example": "Facebook"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocialAuthServerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/default": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns all users from default directory",
        "description": "Returns all users from default directory (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "getAllUsersFromDefaultUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "User filter parameter (lpfUserPKValue)",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user to the default directory",
        "description": "Create a new user to the deafult directory. The directory must always be specified, since it's the container of the users",
        "operationId": "createUserToDefaultUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "user",
            "description": "The JSON resource to be used for the user creation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a new user to the default directory",
        "description": "Update a new user to the default directory. The directory must always be specified, since it's the container of the users",
        "operationId": "updateUserToDefaultUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete multiple existing users from the default directory",
        "operationId": "deleteMultipleUsersFromDefaultUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "users",
            "in": "query",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "johnsmith, anotherjohnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/default/find/{lpfUserPKValue}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns true or false if the user can be found in default directory",
        "description": "Returns true or false if the user can be found in default directory (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "findOneUserInDefaultUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FindBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/default/{lpfUserPKValue}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns all users from default directory",
        "description": "Returns one user from default directory (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "getOneUserFromDefaultUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete an existing user from the deafult directory",
        "operationId": "deleteUserFromDefaultUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/{directory}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns all users from specified directory",
        "description": "Returns all users from specified directory",
        "operationId": "getAllUsersFromDirectoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Path parameter to specify the directory cn the users will be returned from",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Query parameter to return filtered result",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user to the specified directory",
        "description": "Create a new user to the specified directory. The directory must always be specified, since it's the container of the users",
        "operationId": "createUserToDirectoryUsingPOST",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Path parameter to specify the directory cn for the user to be created",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "802": {
            "description": "Already Existing",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a new user to the specified directory",
        "description": "Update a new user to the specified directory. The directory must always be specified, since it's the container of the users",
        "operationId": "updateUserToDirectoryUsingPUT",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Path parameter to specify the directory cn for the user to be updated",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete multiple existing users from the specified directory",
        "operationId": "deleteMultipleUsersFromDirectoryUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Delete a list of users from the specified directory",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "users",
            "in": "query",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "johnsmith, anotherjohnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/{directory}/find/{lpfUserPKValue}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns true or false if the user can be found in default directory",
        "description": "Returns true or false if the user can be found in default directory (currently, the default directory is \"Built-in Self-Registration Directory\")",
        "operationId": "findOneUserInDirectoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Path parameter to specify the directory cn the users will be returned from",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FindBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/wam/v1/users/{directory}/{lpfUserPKValue}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns one user from specified directory",
        "description": "Returns one users from specified directory",
        "operationId": "getOneUsersFromDirectoryUsingGET",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Path parameter to specify the directory cn the users will be returned from",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Query parameter to return only specific fields",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete an existing user from the specified directory",
        "operationId": "deleteUserFromDirectoryUsingDELETE",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Debug mode",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false,
            "x-example": "false"
          },
          {
            "name": "directory",
            "in": "path",
            "description": "Delete an existing user from the specified directory",
            "required": true,
            "type": "string",
            "x-example": "lpfdirectory_selfregistration"
          },
          {
            "name": "lpfUserPKValue",
            "in": "path",
            "description": "Path parameter to specify the user to be returned",
            "required": true,
            "type": "string",
            "x-example": "johnsmith"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteBodyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          },
          "801": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ExceptionResponse"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AccountLinking": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfAllowedSocialAuthServers": {
          "type": "array",
          "description": "Social Authentication Servers allowed to be used to link accounts",
          "items": {
            "$ref": "#/definitions/AccountLinkingSocialAuthServer"
          }
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "AccountLinking",
      "description": "Object definition for Account Linking"
    },
    "AccountLinkingResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfAccountLinking",
          "description": "LpfAccountLinking type"
        },
        "body": {
          "description": "Body contains a LpfAccountLinking object",
          "$ref": "#/definitions/AccountLinking"
        }
      },
      "title": "AccountLinkingResponse",
      "description": "Response for an Account Linking"
    },
    "AccountLinkingResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfAccountLinking",
          "description": "LpfAccountLinking type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfAccountLinking objects",
          "items": {
            "$ref": "#/definitions/AccountLinking"
          }
        }
      },
      "title": "AccountLinkingResponseList",
      "description": "Response for a list of Account Linking objects"
    },
    "AccountLinkingSocialAuthServer": {
      "type": "object",
      "properties": {
        "lpfDisplayName": {
          "type": "string",
          "example": "Facebook Social Authentication Server",
          "description": "Display Name"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        },
        "position": {
          "type": "string",
          "example": 1,
          "description": "Position"
        }
      },
      "title": "AccountLinkingSocialAuthServer",
      "description": "Object model for Account Linking Social Auth Server"
    },
    "AuthPolicy": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "fallbackToFormAuto": {
          "type": "boolean"
        },
        "lpfCookieFlagAllowBrowserCaching": {
          "type": "boolean",
          "example": true,
          "description": "Save cookie after session"
        },
        "lpfCookieFlagRefreshCookie": {
          "type": "boolean",
          "example": true,
          "description": "Re-emit cookie for each request"
        },
        "lpfCookieFlagVerifyIP": {
          "type": "boolean",
          "example": true,
          "description": "Verify IP address"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfamrauthmethod": {
          "type": "string",
          "example": "name",
          "description": "Name of authentication method"
        },
        "lpfamrauthmethodtype": {
          "type": "string",
          "example": "PASSWORD",
          "description": "Authentication method type",
          "enum": [
            "NOT_ACTIVATED",
            "PASSWORD",
            "EXTERNAL"
          ]
        },
        "lpfamrbaseurl": {
          "type": "string",
          "description": "Url base of external method"
        },
        "lpfamrportalref": {
          "type": "string",
          "example": "WAM Admin Server Web Agent",
          "description": "Portal of Web Agent reference associated with authentication method"
        },
        "lpfauthenticationserverref": {
          "type": "string",
          "example": "Authentication server",
          "description": "Authentication server reference"
        },
        "lpfauthrequestformat": {
          "type": "string",
          "example": "Form authentication",
          "description": "End User Authentication fornat",
          "enum": [
            "NOT_SET_AUTHREQUESTFORMATTYPE",
            "HTTPBASIC_AUTHREQUESTFORMATTYPE",
            "FORM_AUTHREQUESTFORMATTYPE",
            "CERT_AUTHREQUESTFORMATTYPE",
            "AUTHSERVER_AUTHREQUESTFORMATTYPE",
            "USERS_CHOICE_AUTHREQUESTFORMATTYPE",
            "FRONTAL_HTTP_HEADER_AUTHREQUESTFORMATTYPE",
            "BLACKBERRY_AUTHREQUESTFORMATTYPE",
            "GRID_PASSWORD_AUTHREQUESTFORMATTYPE",
            "QRENTRY_AUTHREQUESTFORMATTYPE",
            "CASSERVER_AUTHREQUESTFORMATTYPE",
            "CHAINEDAUTHENTICATIONS_AUTHREQUESTFORMATTYPE",
            "CODE_SEND_BY_MAIL_AUTHENTICATION_AUTHREQUESTFORMATTYPE",
            "CODE_SEND_BY_SMS_AUTHENTICATION_AUTHREQUESTFORMATTYPE",
            "SOCIAL_AUTHENTICATION_AUTHREQUESTFORMATTYPE",
            "CAPTCHA_PROTECTION_AUTHREQUESTFORMATTYPE",
            "BROWSER_FINGERPRINT_AUTHREQUESTFORMATTYPE",
            "CONTEXT_AWARE_AUTHREQUESTFORMATTYPE",
            "BEARER_TOKEN_AUTHREQUESTFORMATTYPE"
          ]
        },
        "lpfauthreturneddata": {
          "type": "string",
          "example": "HTTP_REDIRECT_AUTHRETURNEDDATATYPE",
          "description": "Authentication result type",
          "enum": [
            "WEBSERVER_RETURNCODE_AUTHRETURNEDDATATYPE",
            "HTTP_REDIRECT_AUTHRETURNEDDATATYPE",
            "SAML_ASSERTION_AUTHRETURNEDDATATYPE"
          ]
        },
        "lpfauthtimeout": {
          "type": "integer",
          "format": "int32",
          "example": 60,
          "description": "Saml assertion validity (sec)"
        },
        "lpfauthwithoutcookie": {
          "type": "boolean",
          "example": false,
          "description": "Authentication without cookie"
        },
        "lpfbesfolderref": {
          "type": "string",
          "example": "referenceName",
          "description": "Bes folder reference"
        },
        "lpfcaptchaallowed": {
          "type": "boolean",
          "example": false,
          "description": "Allow captcha"
        },
        "lpfcardbackgroundimage": {
          "type": "string",
          "description": "Background image as b64 string"
        },
        "lpfcardidentifiertext": {
          "type": "string",
          "example": "Common Name",
          "description": "User identifier"
        },
        "lpfcardvaliditydatetextandformat": {
          "type": "array",
          "example": [
            "EN:Expiration Date: %m/%e/%y"
          ],
          "description": "Localization of validity date",
          "items": {
            "type": "string"
          }
        },
        "lpfcasserverref": {
          "type": "string",
          "example": "CAS authentication server",
          "description": "CAS authentication server reference"
        },
        "lpfcertauthpollingfrequency": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "Certificate checking frequency (sec)"
        },
        "lpfcheckpwddatabase": {
          "type": "array",
          "example": [
            "1:ldap"
          ],
          "description": "Ordered list of databases used to check password",
          "items": {
            "type": "string"
          }
        },
        "lpfcheckpwddatabasechoice": {
          "type": "boolean",
          "example": false,
          "description": "Choice authentication database"
        },
        "lpfclientipaddresscontroltype": {
          "type": "string",
          "example": "DENY_ALL_EXCEPT_FOLLOWING_IPS",
          "description": "Default filtering type",
          "enum": [
            "DISABLED",
            "DENY_ALL_EXCEPT_FOLLOWING_IPS",
            "ALLOW_ALL_EXCEPT_FOLLOWING_IPS"
          ]
        },
        "lpfclientipaddressfilter": {
          "type": "array",
          "example": [],
          "description": "List of IP address filter",
          "items": {
            "type": "string"
          }
        },
        "lpfcookieauthtimeout": {
          "type": "integer",
          "format": "int32",
          "example": 600,
          "description": "Validity duration (sec)"
        },
        "lpfcookieinactivitytimeout": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Inactivity timeout (sec)"
        },
        "lpfdisplaylocaldomaininwayf": {
          "type": "boolean",
          "example": true,
          "description": "Display the local domain when choosing the identity provider"
        },
        "lpfenablewaywithmobile": {
          "type": "boolean",
          "example": false,
          "description": "Enable way with mobile"
        },
        "lpfenduserdisplayname": {
          "type": "array",
          "example": [],
          "description": "List of end user display names",
          "items": {
            "type": "string"
          }
        },
        "lpfextdesc": {
          "type": "array",
          "example": [],
          "description": "List of end user display name descriptions",
          "items": {
            "type": "string"
          }
        },
        "lpffallbacktoformauth": {
          "type": "boolean",
          "example": false,
          "description": "Fall back to form authentication"
        },
        "lpfgridpwdcardvalidityduration": {
          "type": "integer",
          "format": "int32",
          "example": 365,
          "description": "Card validity duration (days)"
        },
        "lpfgridpwdchallengelength": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "Length of the chalenge"
        },
        "lpfgridpwddownloadperiod": {
          "type": "integer",
          "format": "int32",
          "example": 600,
          "description": "Card download validity duration (sec)"
        },
        "lpfgridpwdgridvalidityduration": {
          "type": "integer",
          "format": "int32",
          "example": 360,
          "description": "Grid validity duration (sec)"
        },
        "lpfheadermappings": {
          "type": "array",
          "example": [],
          "description": "List of Http header mappings to ldap user attributes",
          "items": {
            "type": "string"
          }
        },
        "lpficon": {
          "type": "string",
          "description": "Icon image as b64 string"
        },
        "lpfidentificationdatabasechoice": {
          "type": "boolean",
          "example": false,
          "description": "Choice identification database"
        },
        "lpfinjectiondatacontainerref": {
          "type": "string",
          "example": "Injection database for SAML",
          "description": "Injection data base reference"
        },
        "lpfkeepauthpolicysessionref": {
          "type": "string",
          "example": "Authentication with Certificate",
          "description": "Keep the session active as the authentication policy reference"
        },
        "lpfmultidirectoryref": {
          "type": "string",
          "example": "Build-in Multi User's Directory",
          "description": "Multi users directory reference"
        },
        "lpfnbattempsbeforecaptcha": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "No of attempts before captcha"
        },
        "lpforderedauthpolicies": {
          "type": "array",
          "example": [],
          "description": "List of authentication policies",
          "items": {
            "type": "string"
          }
        },
        "lpfpath": {
          "type": "string",
          "example": "/interdom",
          "description": "Path on server"
        },
        "lpfremembermeenabled": {
          "type": "boolean",
          "example": false,
          "description": "Enable Remember me feature"
        },
        "lpfsamldomainauthlevel": {
          "type": "string",
          "example": "LOW",
          "description": "Authentication level on these domains",
          "enum": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ]
        },
        "lpfsamldomains": {
          "type": "array",
          "example": [],
          "description": "List of SAML domains",
          "items": {
            "type": "string"
          }
        },
        "lpfsamlissuersuffix": {
          "type": "string",
          "description": "Suffix to add to SAML issuer"
        },
        "lpfscopetovalidate": {
          "type": "array",
          "example": [],
          "description": "List of scopes to be validated",
          "items": {
            "type": "string"
          }
        },
        "lpfsocialattrmappings": {
          "type": "array",
          "example": [],
          "description": "List of social attributes mappings to ldap user attributes",
          "items": {
            "type": "string"
          }
        },
        "lpfsocialauthserverref": {
          "type": "string",
          "example": "Facebook social authentication server",
          "description": "Social authentication server"
        },
        "lpfvirtualkeyboard": {
          "type": "string",
          "example": "No Virtual Keyboard",
          "description": "Virtual keyboard",
          "enum": [
            "NOT_ENABLED_VIRTUALKB_TYPE",
            "ENABLED_STATIC_VIRTUALKB_TYPE",
            "ENABLED_MOVING_VIRTUALKB_TYPE"
          ]
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "AuthPolicy",
      "description": "Represents the Authentication Policy"
    },
    "AuthPolicyResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "AuthPolicy",
          "description": "AuthPolicy type"
        },
        "body": {
          "description": "Body contains a AuthPolicy object",
          "$ref": "#/definitions/AuthPolicy"
        }
      },
      "title": "AuthPolicyResponse",
      "description": "Response for Authentication Policy"
    },
    "AuthPolicyResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "AuthPolicy",
          "description": "AuthPolicy type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of AuthPolicy objects",
          "items": {
            "$ref": "#/definitions/AuthPolicy"
          }
        }
      },
      "title": "AuthPolicyResponseList",
      "description": "Response for a list of Saml Domain objects"
    },
    "CertAuthority": {
      "type": "object",
      "properties": {
        "lpfIsTrustedForClientAuth": {
          "type": "boolean",
          "example": true,
          "description": "Accept client certificates from this authority"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "CertAuthority",
      "description": "Object definition for Certificate Authority"
    },
    "CertAuthorityResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfCertificateAuthority",
          "description": "LpfCertificateAuthority type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of SocialAuthServer objects",
          "items": {
            "$ref": "#/definitions/CertAuthority"
          }
        }
      },
      "title": "CertAuthorityResponseList",
      "description": "Response for a list of Certificate Authorities"
    },
    "CharsSet": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Contains 10 Digits: from 0 to 9",
          "description": "Description"
        },
        "lpfCharacters": {
          "type": "string",
          "example": "0123456789",
          "description": "Characters"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "CharsSet",
      "description": "Object definition for Characters Set"
    },
    "CharsSetResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfCharsSet",
          "description": "LpfCharsSet type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfCharsSet objects",
          "items": {
            "$ref": "#/definitions/CharsSet"
          }
        }
      },
      "title": "CharsSetResponseList",
      "description": "Response for a list of Characters Set objects"
    },
    "ConfigData": {
      "type": "object",
      "properties": {
        "AttributeAuthorityDescriptor_AttributeService_Location": {
          "type": "string",
          "description": "Saml AttributeAuthorityDescriptor.AttributeService.Location for Authentication Server IDP"
        },
        "AttributeAuthorityDescriptor_Certificate": {
          "type": "string",
          "description": "Saml AttributeAuthorityDescriptor.Certificate for Authentication Server IDP"
        },
        "IDPSSODescriptor_Certificate": {
          "type": "string",
          "description": "Saml IDPSSODescriptor.Certificate for Authentication Server IDP"
        },
        "IDPSSODescriptor_SingleLogoutService_Location": {
          "type": "string",
          "description": "Saml IDPSSODescriptor.SingleLogoutService.Location for Authentication Server IDP"
        },
        "IDPSSODescriptor_SingleSignOnService_Location": {
          "type": "string",
          "description": "Saml IDPSSODescriptor.SingleSignOnService.Location for Authentication Server IDP"
        },
        "IDP_SAML_METADATA": {
          "type": "string",
          "description": "Saml metadata for Authentication Server IDP"
        },
        "IDP_SAML_METADATA_JSON": {
          "description": "Saml metadata for Authentication Server IDP as json",
          "$ref": "#/definitions/JsonNode"
        },
        "SAML_DOMAIN_SP_SAML_METADATA": {
          "type": "string",
          "description": "Saml metadata for Saml Domain SP"
        },
        "keysNotFound": {
          "type": "array",
          "example": [],
          "description": "List of keys not found",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ConfigData",
      "description": "Represents configuration data for different keys"
    },
    "ConfigDataResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "ConfigData",
          "description": "ConfigData type"
        },
        "body": {
          "description": "Body contains a ConfigData object",
          "$ref": "#/definitions/ConfigData"
        }
      },
      "title": "ConfigDataResponse",
      "description": "Response for a ConfigData"
    },
    "Consent": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfConsentAlert": {
          "type": "array",
          "example": "en:Please indicate that you have read and agree to the terms of services",
          "description": "Localized alert for Consent",
          "items": {
            "type": "string"
          }
        },
        "lpfConsentLabel": {
          "type": "array",
          "example": "en:Terms of Service",
          "description": "Localized label for Consent",
          "items": {
            "type": "string"
          }
        },
        "lpfConsentText": {
          "type": "array",
          "example": "en:I have read and aggree...",
          "description": "Localized text for Consent",
          "items": {
            "type": "string"
          }
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfRequiredConsent": {
          "type": "boolean",
          "example": true,
          "description": "Consent is required"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "Consent",
      "description": "Object definition for Consent"
    },
    "ConsentResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfConsent",
          "description": "LpfConsent type"
        },
        "body": {
          "description": "Body contains a LpfConsent object",
          "$ref": "#/definitions/Consent"
        }
      },
      "title": "ConsentResponse",
      "description": "Response for Consent"
    },
    "ConsentResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfConsent",
          "description": "LpfConsent type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfConsent objects",
          "items": {
            "$ref": "#/definitions/Consent"
          }
        }
      },
      "title": "ConsentResponseList",
      "description": "Response for a list of Consents"
    },
    "DefaultResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "lpfUser",
          "description": "The object type"
        }
      },
      "title": "DefaultResponse",
      "description": "Common response for WAM API"
    },
    "DefaultResponse«string»": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "lpfUser",
          "description": "The object type"
        }
      },
      "title": "DefaultResponse«string»",
      "description": "Common response for WAM API"
    },
    "DeleteBody": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "string",
          "example": "object1, object2",
          "description": "The list of objects that were deleted"
        },
        "notDeleted": {
          "type": "string",
          "example": "object3, object4",
          "description": "The list of objects that were not deleted"
        }
      },
      "title": "DeleteBody",
      "description": "Object definition for object deletion"
    },
    "DeleteBodyResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "lpfUser",
          "description": "The object type"
        },
        "body": {
          "description": "Body contains the result of the object deletion",
          "$ref": "#/definitions/DeleteBody"
        }
      },
      "title": "DeleteBodyResponse",
      "description": "Response for object deletion"
    },
    "DirectoryPermission": {
      "type": "object",
      "properties": {
        "lpfDoNotAllowAccountLinking": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to link his account"
        },
        "lpfDoNotAllowPrimaryPasswordModification": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to change his primary password"
        },
        "lpfDoNotAllowPrivacyProfile": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to visualize his Privacy Profile"
        },
        "lpfDoNotAllowProfilEdition": {
          "type": "string",
          "description": "User Profile",
          "enum": [
            "ALLOWED_TO_EDIT_MODIFY_PROFILE",
            "NOT_ALLOWED_TO_EDIT_MODIFY_PROFILE",
            "ALLOWED_TO_EDIT_NOT_MODIFY_PROFILE"
          ]
        },
        "lpfDoNotAllowResetPassword": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to reset his primary password"
        },
        "lpfDoNotAllowSelfReporting": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to access End User Access Self-Reporting"
        },
        "lpfDoNotAllowSelfUnProvisioning": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to remove his entry in the LDAP Directory"
        }
      },
      "title": "DirectoryPermission",
      "description": "Object definition for directory permissions"
    },
    "EuaCustomization": {
      "type": "object",
      "properties": {
        "lpfAdditionalLinkTitleFrameAuth": {
          "type": "array",
          "example": "en:Read More",
          "description": "Translated value for additionnal pop-up link",
          "items": {
            "type": "string"
          }
        },
        "lpfAdditionalLinkTitlePageAuth": {
          "type": "array",
          "example": "en:Title",
          "description": "Translated value for addition link in Authentication page",
          "items": {
            "type": "string"
          }
        },
        "lpfAdditionalLinkURLFrameAuth": {
          "type": "string",
          "example": "http://evidian.com/more",
          "description": "Authentication additional link"
        },
        "lpfAdditionalLinkURLPageAuth": {
          "type": "string",
          "example": "http://www.evidian.com",
          "description": "Additional url in Authentication page"
        },
        "lpfAlwaysInNewWin": {
          "type": "boolean",
          "example": true,
          "description": "Always open applications in new browser tab"
        },
        "lpfAlwaysInNewWinBuiltIn": {
          "type": "boolean",
          "example": true,
          "description": "Always open built-in services in a new browser tab"
        },
        "lpfAutoSubmitLogoutPage": {
          "type": "boolean",
          "example": true,
          "description": "Automatic submission of the logout page."
        },
        "lpfBackToPortalUrl": {
          "type": "string",
          "example": "http://www.evidan.com",
          "description": "URl for link \"Back Portal\" or \"Back Web Agent\""
        },
        "lpfBackgroundAlternateURLPageAuth": {
          "type": "string",
          "example": "http://www.evidian.com/background",
          "description": "Base url pointing to a set of image from bg0.jpg to bg15.jpg"
        },
        "lpfBackgroundColor": {
          "type": "string",
          "example": "#fffff",
          "description": "Background Color in hex "
        },
        "lpfBackgroundColorPageAuth": {
          "type": "string",
          "example": "#45218",
          "description": "Background color in hex for Authentication page"
        },
        "lpfColorGradientEnd": {
          "type": "string",
          "example": "#fffff",
          "description": "End Hex Color for gradient header"
        },
        "lpfColorGradientStart": {
          "type": "string",
          "example": "#f452ez",
          "description": "Start Hex Color for gradient header"
        },
        "lpfCustomCSSFrameAuth": {
          "type": "string",
          "example": ".class { color: red; }",
          "description": "Additional CSS for the Pop-Up Authentication customization"
        },
        "lpfCustomCSSPageAuth": {
          "type": "string",
          "example": ".class { color: red; }",
          "description": "Additionnal Css that will be used to authentication page"
        },
        "lpfCustomEuaCss": {
          "type": "string",
          "example": ".class { color: red; }",
          "description": "Additional CSS for the EUA customization"
        },
        "lpfDisplayBackPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the Back home button"
        },
        "lpfDisplayBackgroundImagePageAuth": {
          "type": "boolean",
          "example": false,
          "description": "Base url pointing to a set of image from bg0.jpg to bg15.jpg for Authentication page"
        },
        "lpfDisplayBrandImagePageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the brand image"
        },
        "lpfDisplayFavorites": {
          "type": "boolean",
          "example": true,
          "description": "Display the Favorites Tab"
        },
        "lpfDisplayFooterPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display custom footer"
        },
        "lpfDisplayHeaderPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display custom header"
        },
        "lpfDisplayLangPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the language selection"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Default Eua Customization",
          "description": "Display Name"
        },
        "lpfDisplayRecents": {
          "type": "boolean",
          "example": true,
          "description": "Display the Recents Tab"
        },
        "lpfEnterpriseName": {
          "type": "string",
          "example": "Evidian",
          "description": "Entreprise name"
        },
        "lpfFavicon": {
          "type": "string",
          "example": "image/x-icon,base64,uiguadiugazuagu",
          "description": "base 64 favicon"
        },
        "lpfFooterAdditionalText": {
          "type": "array",
          "example": "en:Footer",
          "description": "Translated value for Footer additionnal text",
          "items": {
            "type": "string"
          }
        },
        "lpfFooterImage": {
          "type": "string",
          "example": "image/jpeg,base64,uiguadiugazuagu",
          "description": "Base 64 image of footer"
        },
        "lpfFromEmailAddress": {
          "type": "string",
          "example": "ne-replay@evidian.com",
          "description": "Email adresse from where email will be send"
        },
        "lpfHeaderAdditionalText": {
          "type": "array",
          "example": "en:Header",
          "description": "Translated value for Header additionnal Text",
          "items": {
            "type": "string"
          }
        },
        "lpfHeaderImage": {
          "type": "string",
          "example": "image/jpeg,base64,uiguadiugazuagu",
          "description": "Base64 image of header"
        },
        "lpfHelpFrameAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display help link"
        },
        "lpfHelpPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display help link"
        },
        "lpfLostidFrameAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the Lost Identifier link"
        },
        "lpfLostidPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the Lost Identifier link"
        },
        "lpfMobileenrolFrameAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display Mobile Enrolement link"
        },
        "lpfMobileenrolPageAuth": {
          "type": "boolean",
          "example": false,
          "description": "Display Mobile Enrolement link"
        },
        "lpfProductName": {
          "type": "string",
          "example": "Web Access Management",
          "description": "Product name"
        },
        "lpfResetpwdFrameAuth": {
          "type": "boolean",
          "example": false,
          "description": "Display the Lost Password link"
        },
        "lpfResetpwdPageAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display the Reset Password link"
        },
        "lpfSelfregFrameAuth": {
          "type": "boolean",
          "example": true,
          "description": "Display Self-Registration link"
        },
        "lpfSelfregPageAuth": {
          "type": "boolean",
          "example": false,
          "description": "Display Self-Registration link"
        },
        "lpfTitle": {
          "type": "array",
          "example": "en:Title",
          "description": "Translated value for Title",
          "items": {
            "type": "string"
          }
        },
        "lpfTitleForegroundColor": {
          "type": "string",
          "example": "#121212",
          "description": "Foreground Color"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "EuaCustomization",
      "description": "Object definition for EUA Customizations"
    },
    "EuaCustomizationResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfEuaCustomization",
          "description": "LpfEuaCustomization type"
        },
        "body": {
          "description": "Body contains a LpfEuaCustomization object",
          "$ref": "#/definitions/EuaCustomization"
        }
      },
      "title": "EuaCustomizationResponse",
      "description": "Response for Eua Customization"
    },
    "EuaCustomizationResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfEuaCusstomization",
          "description": "LpfEuaCustomization type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfEuaCustomization objects",
          "items": {
            "$ref": "#/definitions/EuaCustomization"
          }
        }
      },
      "title": "EuaCustomizationResponseList",
      "description": "Response for a list of EUA Customizations"
    },
    "ExceptionResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 400,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "msg": {
          "type": "string",
          "example": "lpf_not_found",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "Lpf object not found",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ExceptionResponse"
    },
    "FindBody": {
      "type": "object",
      "properties": {
        "found": {
          "type": "string",
          "example": true,
          "description": "Returns boolean if the object exists in LDAP"
        }
      },
      "title": "FindBody",
      "description": "Object definition for finding a LDAP object"
    },
    "FindBodyResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "FindBodyResponse",
          "description": "FindBodyResponse type"
        },
        "body": {
          "description": "Body contains the result of the find operation",
          "$ref": "#/definitions/FindBody"
        }
      },
      "title": "FindBodyResponse",
      "description": "Response for finding an object"
    },
    "GoogleAnalytics": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfGoogleAnalyticsID": {
          "type": "string",
          "example": "UA-000000-2",
          "description": "Id"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "GoogleAnalytics",
      "description": "Object definition for Google Analytics"
    },
    "GoogleAnalyticsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfGoogleAnalytics",
          "description": "LpfAGoogleAnalytics type"
        },
        "body": {
          "description": "Body contains a LpfGoogleAnalytics object",
          "$ref": "#/definitions/GoogleAnalytics"
        }
      },
      "title": "GoogleAnalyticsResponse",
      "description": "Response for a Google Analytics object"
    },
    "GoogleAnalyticsResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfGoogleAnalytics",
          "description": "LpfGoogleAnalytics type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfGoogleAnalytics objects",
          "items": {
            "$ref": "#/definitions/GoogleAnalytics"
          }
        }
      },
      "title": "GoogleAnalyticsResponseList",
      "description": "Response for a list of Google Analytics objects"
    },
    "Guideline": {
      "type": "object",
      "properties": {
        "details": {
          "example": "Details info in json format",
          "description": "Details info in json format",
          "$ref": "#/definitions/JsonNode"
        },
        "summary": {
          "example": "Summary info in json format",
          "description": "Summary info in json format",
          "$ref": "#/definitions/JsonNode"
        }
      },
      "title": "Guideline",
      "description": "Represents the Guideline object for management"
    },
    "GuidelineFile": {
      "type": "object",
      "properties": {
        "content": {
          "example": "Content of the file in json format",
          "description": "Content of the file in json format",
          "$ref": "#/definitions/JsonNode"
        },
        "error": {
          "type": "string",
          "example": "Status of reading file name",
          "description": "Status of reading file name"
        },
        "fileName": {
          "type": "string",
          "example": "File name",
          "description": "File name"
        }
      },
      "title": "GuidelineFile",
      "description": "Represents the Guideline File object"
    },
    "GuidelineMngResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "Guideline",
          "description": "Guideline management type"
        },
        "body": {
          "description": "Body contains a Guideline management response",
          "$ref": "#/definitions/Guideline"
        }
      },
      "title": "GuidelineMngResponse",
      "description": "Response for Guideline management"
    },
    "GuidelineResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "Guideline",
          "description": "Guideline type"
        },
        "body": {
          "description": "Body contains a Guideline object",
          "$ref": "#/definitions/JsonNode"
        }
      },
      "title": "GuidelineResponse",
      "description": "Response for Guideline"
    },
    "GuidelineResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "GuildelineResponseList",
          "description": "Guildeline response list type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of GuildelineFile objects",
          "items": {
            "$ref": "#/definitions/GuidelineFile"
          }
        }
      },
      "title": "GuidelineResponseList",
      "description": "Response for a list of GuildelineFile objects"
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      },
      "title": "JsonNode"
    },
    "PasswordPolicy": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfLockDuration": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Lockout duration"
        },
        "lpfMaxDuration": {
          "type": "integer",
          "format": "int32",
          "example": 365,
          "description": "Maximum password life time"
        },
        "lpfMaxDurationAllowChanges": {
          "type": "boolean",
          "example": true,
          "description": "Allow changes at any time"
        },
        "lpfMaxRetries": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Bad logon attempts"
        },
        "lpfMaxRetriesAllowChanges": {
          "type": "boolean",
          "example": true,
          "description": "Allow changes at any time"
        },
        "lpfMinDuration": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Minimum password life time"
        },
        "lpfMinDurationAllowChanges": {
          "type": "boolean",
          "example": true,
          "description": "Allow changes at any time"
        },
        "lpfPasswordHistorySize": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Password history size"
        },
        "lpfPriPwdWillExpireMailBody": {
          "type": "string",
          "example": "__uid__, your WAM primary password will expire in __day_nb__ day(s), __hour_nb__ hour(s) and __minute_nb__ minute(s)",
          "description": "Body warning mail"
        },
        "lpfPriPwdWillExpireMailDelay": {
          "type": "array",
          "example": 6,
          "description": "Days before expiration",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "lpfPriPwdWillExpireMailSubject": {
          "type": "string",
          "example": "Your WAM primary password will expire soon",
          "description": "Subject warning mail"
        },
        "lpfPriPwdWillExpireMsgDelay": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Password Expiration Message in the EUA"
        },
        "lpfRetryLatency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Retry latency"
        },
        "lpfRetryLatencyAllowChanges": {
          "type": "boolean",
          "example": true,
          "description": "Allow changes at any time"
        },
        "lpfUserMustChangePassword": {
          "type": "boolean",
          "example": true,
          "description": "User must change password at first use"
        },
        "lpfUserMustInitQuestionResponse": {
          "type": "boolean",
          "example": true,
          "description": "User must initialize his \"Lost password form\""
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PasswordPolicy",
      "description": "Object definition for Password Policy"
    },
    "PasswordPolicyResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfPasswordPolicy",
          "description": "LpfPasswordPolicy type"
        },
        "body": {
          "description": "Body contains a LpfPasswordPolicy object",
          "$ref": "#/definitions/PasswordPolicy"
        }
      },
      "title": "PasswordPolicyResponse",
      "description": "Response for Password Policy"
    },
    "PasswordPolicyResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfPasswordPolicy",
          "description": "LpfPasswordPolicy type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfPasswordPolicy objects",
          "items": {
            "$ref": "#/definitions/PasswordPolicy"
          }
        }
      },
      "title": "PasswordPolicyResponseList",
      "description": "Response for a list of Password Policy objects"
    },
    "PasswordQuality": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfCharactersSets": {
          "type": "array",
          "description": "Password strength",
          "items": {
            "$ref": "#/definitions/PasswordQualityCharsSet"
          }
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfDoNotAllowConsecutiveIdenticalCharacters": {
          "type": "boolean",
          "example": true,
          "description": "Forbid two identical successive characters, the case being ignored"
        },
        "lpfMaximalLength": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "Password maximal length"
        },
        "lpfMinimalLength": {
          "type": "integer",
          "format": "int32",
          "example": 8,
          "description": "Password minimal length"
        },
        "lpfPasswordQualityScore": {
          "type": "string",
          "description": "Password strength",
          "enum": [
            "DO_NOT_EVALUATE_PASSWORD_STRENGTH",
            "EVALUATE_PASSWORD_STRENGTH",
            "EVALUATE_PASSWORD_STRENGTH_AND_BLOCK_THE_FORM_SUBMISSION"
          ]
        },
        "lpfSpecificRules": {
          "type": "boolean",
          "example": true,
          "description": "Password cannot contain the login"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PasswordQuality",
      "description": "Object definition for Password Quality"
    },
    "PasswordQualityCharsSet": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean",
          "example": true,
          "description": "Authorized"
        },
        "lpfCharacters": {
          "type": "string",
          "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
          "description": "Characters Sets Details"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Built-in Letter Cases Characters Set",
          "description": "Character Set display name"
        },
        "maxNumber": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Max Number"
        },
        "minNumber": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Min Number"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PasswordQualityCharsSet",
      "description": "Object model for Password Quality Characters Sets"
    },
    "PasswordQualityResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfPasswordQuality",
          "description": "LpfPasswordQuality type"
        },
        "body": {
          "description": "Body contains a LpfPasswordQuality object",
          "$ref": "#/definitions/PasswordQuality"
        }
      },
      "title": "PasswordQualityResponse",
      "description": "Response for Password Quality"
    },
    "PasswordQualityResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfPasswordQuality",
          "description": "LpfPasswordQuality type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfPasswordQuality objects",
          "items": {
            "$ref": "#/definitions/PasswordQuality"
          }
        }
      },
      "title": "PasswordQualityResponseList",
      "description": "Response for a list of Password Quality objects"
    },
    "PasswordReset": {
      "type": "object",
      "properties": {
        "lpfChallengeLength": {
          "type": "integer",
          "format": "int32",
          "example": 8,
          "description": "Length of the access code sent by mail or SMS"
        },
        "lpfForceDirectoryChoice": {
          "type": "boolean",
          "example": true,
          "description": "Always display the list of Users Directories"
        },
        "lpfResetPwdCaptchaAllowed": {
          "type": "boolean",
          "example": true,
          "description": "User Captcha"
        },
        "lpfResetPwdMethods": {
          "type": "array",
          "description": "Methods to use for the reset of the primary password",
          "items": {
            "type": "string",
            "enum": [
              "QR",
              "MAIL",
              "SMS"
            ]
          }
        },
        "lpfValidityDurationMinutes": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "Validity duration of the link in the mail in minutes"
        },
        "lpfValidityDurationSeconds": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Validity duration of the link in the mail in seconds"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PasswordReset",
      "description": "Object definition for Password Reset"
    },
    "PasswordResetResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfPasswordReset",
          "description": "LpfPasswordReset type"
        },
        "body": {
          "description": "Body contains a LpfPasswordReset object",
          "$ref": "#/definitions/PasswordReset"
        }
      },
      "title": "PasswordResetResponse",
      "description": "Response for Password Reset"
    },
    "ProfileAttribute": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfOrder": {
          "type": "integer",
          "format": "int32",
          "example": 8,
          "description": "Order of attribute in list"
        },
        "lpfProfileAttributeLabel": {
          "type": "array",
          "example": [
            "en:State or province name",
            "fr:Région"
          ],
          "description": "Label to be used for this field",
          "items": {
            "type": "string"
          }
        },
        "lpfProfileAttributePlaceholder": {
          "type": "array",
          "example": [
            "en:Enter your state or province name",
            "fr:Entrez votre région"
          ],
          "description": "Placeholder to be used for this field",
          "items": {
            "type": "string"
          }
        },
        "lpfProfileAttributeStatus": {
          "type": "string",
          "example": "READONLY",
          "description": "Status of profile attribute ",
          "enum": [
            "NOT_VISIBLE",
            "READONLY",
            "OPTIONAL",
            "MANDATORY"
          ]
        },
        "lpfProfileAttributeType": {
          "type": "string",
          "example": "BUTTON",
          "description": "Type of profile attribute ",
          "enum": [
            "BUTTON",
            "CHECKBOX",
            "COLOR",
            "DATE",
            "DATETIME_LOCAL",
            "EMAIL",
            "FILE",
            "IMAGE",
            "MONTH",
            "NUMBER",
            "PASSWORD",
            "RADIO",
            "RANGE",
            "RESET",
            "SEARCH",
            "SUBMIT",
            "TEL",
            "TEXT",
            "TIME",
            "URL",
            "WEEK"
          ]
        },
        "lpfVarEnvName": {
          "type": "array",
          "example": [
            "LpfSt"
          ],
          "description": "List of environment variable",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "ProfileAttribute",
      "description": "Represents the Profile Attribute"
    },
    "PxpAuthServer": {
      "type": "object",
      "properties": {
        "IDPMetadata": {
          "type": "string",
          "example": "Deployed servers",
          "description": "Identity provider metadata"
        },
        "SPMetadata": {
          "type": "string",
          "example": "Deployed servers",
          "description": "Service provider metadata"
        },
        "deployedServers": {
          "type": "array",
          "example": "Deployed servers",
          "description": "Deployed servers",
          "items": {
            "$ref": "#/definitions/PxpDeployedAuthServer"
          }
        },
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfdedicatedtointerdomain": {
          "type": "boolean",
          "example": true,
          "description": "Dedicated to interdomain"
        },
        "lpfdedicatedtomobilesdk": {
          "type": "boolean",
          "example": true,
          "description": "Dedicated to mobile SDK"
        },
        "lpfdedicatedtooidc": {
          "type": "boolean",
          "example": true,
          "description": "Dedicated to open id connect"
        },
        "lpfdedicatedtowsfed": {
          "type": "boolean",
          "example": true,
          "description": "Dedicated to web service federation"
        },
        "lpfdisablesslinsecurerenegotiation": {
          "type": "boolean",
          "example": false,
          "description": "Disable SSL in secure renegociation"
        },
        "lpfeuacustomizationref": {
          "type": "string",
          "example": "lpfEuaCustomisationref",
          "description": "Eua Customisation reference"
        },
        "lpfgoogleanalyticsref": {
          "type": "string",
          "example": "lpfGoogleAnalyticsref",
          "description": "Google analytics reference"
        },
        "lpfhighauthpolicyref": {
          "type": "string",
          "example": "lpfHighAuthenticationPolicy",
          "description": "High authentication policy reference"
        },
        "lpfiframedetectionmode": {
          "type": "boolean",
          "example": true,
          "description": "Detect WAM pages loaded in IFrame"
        },
        "lpfissslv3protocolenabled": {
          "type": "boolean",
          "example": false,
          "description": "Is SSL v3 protocol enabled"
        },
        "lpfkeyref": {
          "type": "string",
          "example": "lpfkeyref",
          "description": "Key reference"
        },
        "lpflowauthpolicyref": {
          "type": "string",
          "example": "lpfLowAuthenticationPolicy",
          "description": "Low authentication policy reference"
        },
        "lpfmediumauthpolicyref": {
          "type": "string",
          "example": "lpfMediumAuthenticationPolicy",
          "description": "Medium authentication policy reference"
        },
        "lpfoidchighauthpolicyref": {
          "type": "string",
          "example": "lpfOidcHighAuthenticationPolicy",
          "description": "Oidc High authentication policy reference"
        },
        "lpfoidclowauthpolicyref": {
          "type": "string",
          "example": "lpfOidcLowAuthenticationPolicy",
          "description": "Oidc Low authentication policy reference"
        },
        "lpfoidcmediumauthpolicyref": {
          "type": "string",
          "example": "lpfOidcMediumAuthenticationPolicy",
          "description": "Oidc Medium authentication policy reference"
        },
        "lpfport": {
          "type": "integer",
          "format": "int32",
          "example": 80,
          "description": "Port"
        },
        "lpfportssl": {
          "type": "integer",
          "format": "int32",
          "example": 9133,
          "description": "Port SSL"
        },
        "lpfprotocol": {
          "type": "string",
          "example": "HTTP",
          "description": "Protocol type",
          "enum": [
            "HTTP",
            "HTTPS"
          ]
        },
        "lpfreversemapperbaseurl2": {
          "type": "string",
          "example": "http://base_url_for_reverse_mapper",
          "description": "External front gateway url"
        },
        "lpfsamlidentity": {
          "type": "string",
          "example": "Saml identity name",
          "description": "Saml identity"
        },
        "lpfsamlkeyref": {
          "type": "string",
          "example": "lpfSamlKey",
          "description": "Saml key reference"
        },
        "lpfservername": {
          "type": "string",
          "example": "test.test-pxp.frec.bull.fr",
          "description": "Server name"
        },
        "lpfspecificdirectiveconf": {
          "type": "string",
          "example": "Specific directive configuration",
          "description": "Specific directive configuration"
        },
        "lpfsupportedciphers": {
          "type": "array",
          "example": [],
          "description": "List of supported ciphers",
          "items": {
            "type": "string"
          }
        },
        "lpfwsfedhighauthpolicyref": {
          "type": "string",
          "example": "lpfWsFedHighAuthenticationPolicy",
          "description": "Web Server Federation High authentication policy reference"
        },
        "lpfwsfedkeyref": {
          "type": "string",
          "example": "lpfWSFederationKey",
          "description": "Web Server federation key reference"
        },
        "lpfwsfedlowauthpolicyref": {
          "type": "string",
          "example": "lpfWsFedLowAuthenticationPolicy",
          "description": "Web Server Federation Low authentication policy reference"
        },
        "lpfwsfedmediumauthpolicyref": {
          "type": "string",
          "example": "lpfWsFedMediumAuthenticationPolicy",
          "description": "Web Server Federation Medium authentication policy reference"
        },
        "lpfwsfedrealmidentifier": {
          "type": "string",
          "example": "wsFedRealmIdentifier",
          "description": "Web Server federation realm identified"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PxpAuthServer",
      "description": "Represents the Pxp Authentication Server"
    },
    "PxpAuthServerResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "PxpAuthServer",
          "description": "PxpAuthServer type"
        },
        "body": {
          "description": "Body contains a PxpAuthServer object",
          "$ref": "#/definitions/PxpAuthServer"
        }
      },
      "title": "PxpAuthServerResponse",
      "description": "Response for Pxp Authentication Server"
    },
    "PxpAuthServerResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "PxpAuthServer",
          "description": "PxpAuthServer type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of PxpAuthServer objects",
          "items": {
            "$ref": "#/definitions/PxpAuthServer"
          }
        }
      },
      "title": "PxpAuthServerResponseList",
      "description": "Response for a list of Pxp Authentication Server objects"
    },
    "PxpDeployedAuthServer": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "PxpDeployedAuthServer",
      "description": "Represents the deployed Pxp Authentication Server"
    },
    "SamlDomain": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfaaauthtype": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Authentication Type"
        },
        "lpfaahttpbasicpassword": {
          "type": "string",
          "example": "dGVzdA==",
          "description": "Http Basic password"
        },
        "lpfaahttpbasicuid": {
          "type": "string",
          "example": "uid",
          "description": "Http Basic Uid"
        },
        "lpfassertionconsumerurl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "Assertion consummer url"
        },
        "lpfcertificatelist": {
          "type": "array",
          "example": [],
          "description": "List with certificates",
          "items": {
            "type": "string"
          }
        },
        "lpfdonotallowprivacyprofile": {
          "type": "boolean",
          "example": true,
          "description": "Allow the user to visualize his privacy profile"
        },
        "lpfdonotallowprofiledition": {
          "type": "string",
          "example": "NOT_ALLOWED_TO_EDIT_AND_MODIFY",
          "description": "Allow editign user profile",
          "enum": [
            "NOT_ALLOWED_TO_EDIT_AND_MODIFY",
            "ALLOWED_TO_EDIT_BUT_NOT_TO_MODIFY"
          ]
        },
        "lpfdonotallowselfreporting": {
          "type": "boolean",
          "example": true,
          "description": "Allow the user to access End User access self reporting"
        },
        "lpfenduserdisplayname": {
          "type": "array",
          "example": [
            "Saml Domain Test En",
            "Saml Domain Test Fr"
          ],
          "description": "Name as seen by end user",
          "items": {
            "type": "string"
          }
        },
        "lpfhighauthidpurl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "High authentication Idp url"
        },
        "lpfjustintimeprovisioning": {
          "type": "boolean",
          "example": true,
          "description": "Just in time provisioning"
        },
        "lpflowauthidpurl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "Low authentication Idp url"
        },
        "lpfmaxsessionsinhistory": {
          "type": "integer",
          "format": "int32",
          "example": 16,
          "description": "Max no of entries in history of users'sessions"
        },
        "lpfmediumauthidpurl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "Medium authentication Idp url"
        },
        "lpforderednotificationref": {
          "type": "array",
          "example": [],
          "description": "List of notification refference names",
          "items": {
            "type": "string"
          }
        },
        "lpfsaml2authnrequesttype": {
          "type": "string",
          "example": "HTTP_REDIRECT",
          "description": "Saml v2 authentication request type",
          "enum": [
            "HTTP_REDIRECT",
            "HTTP_POST_REDIRECT"
          ]
        },
        "lpfsamlaaurl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "Authentication url"
        },
        "lpfsamlattrmapping": {
          "type": "array",
          "example": [],
          "description": "Saml attribute mapping",
          "items": {
            "type": "string"
          }
        },
        "lpfsamldomainattrnameformat": {
          "type": "string",
          "example": "NAMEID_FORMAT_NONE",
          "description": "Require signed authentication request",
          "enum": [
            "NAMEID_FORMAT_NONE",
            "NAMEID_FORMAT_EMAIL_ADDRESS",
            "NAMEID_FORMAT_UNSPECIFIED",
            "NAMEID_FORMAT_PERSISTENT"
          ]
        },
        "lpfsamldomainenableidpproxying": {
          "type": "boolean",
          "example": true,
          "description": "Enable proxying"
        },
        "lpfsamldomainencryptassertion": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Saml domain encrypt assertion"
        },
        "lpfsamldomainencryptnameid": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Saml domain encrypt id"
        },
        "lpfsamldomainsignaturewithoutchain": {
          "type": "boolean",
          "example": true,
          "description": "Include the certificate chain in the signing of the assertion"
        },
        "lpfsamldomainsigningalgo": {
          "type": "string",
          "example": "RSA_SHA256",
          "description": "Algorithm for signing SAML requestsand assertions supported by the remote domain",
          "enum": [
            "RSA_SHA1",
            "RSA_SHA256"
          ]
        },
        "lpfsamldomainstatus": {
          "type": "boolean",
          "example": true,
          "description": "Status of Saml Domain, activated or not"
        },
        "lpfsamldomaintype": {
          "type": "string",
          "example": "SAML_2",
          "description": "Type of Saml Domain",
          "enum": [
            "SAML_1_1",
            "SHIBBOLETH",
            "SAML_2"
          ]
        },
        "lpfsamlextensions": {
          "type": "string",
          "example": "Saml extension",
          "description": "Saml extension"
        },
        "lpfsamlfederationidentityattr": {
          "type": "array",
          "example": [],
          "description": "List with federation attributes",
          "items": {
            "type": "string"
          }
        },
        "lpfsamlidpmetadata": {
          "type": "string",
          "example": "IDP metadata",
          "description": "IDP metadata"
        },
        "lpfsamlissuer": {
          "type": "string",
          "example": "IssuerName",
          "description": "Saml issuer"
        },
        "lpfsamlsignauthnrequest": {
          "type": "boolean",
          "example": true,
          "description": "Require signed authentication request"
        },
        "lpfsamlspmetadata": {
          "type": "string",
          "example": "Saml SP metadata",
          "description": "Saml SP metadata"
        },
        "lpfsamluid": {
          "type": "string",
          "example": "samluid",
          "description": "Saml uid"
        },
        "lpfspstarturl": {
          "type": "string",
          "example": "http://hostname.domainname:9999/cgipath",
          "description": "Start Url"
        },
        "lpfurlfilter": {
          "type": "array",
          "example": [],
          "description": "List of url filters",
          "items": {
            "type": "string"
          }
        },
        "lpfuserprofileref": {
          "type": "string",
          "example": "Default User Profile",
          "description": "User profile reference name"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "SamlDomain",
      "description": "Represents the Saml Domain"
    },
    "SamlDomainResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "SamlDomain",
          "description": "SamlDomain type"
        },
        "body": {
          "description": "Body contains a SamlDomain object",
          "$ref": "#/definitions/SamlDomain"
        }
      },
      "title": "SamlDomainResponse",
      "description": "Response for Saml Domain"
    },
    "SamlDomainResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "SamlDomain",
          "description": "SamlDomain type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of SamlDomain objects",
          "items": {
            "$ref": "#/definitions/SamlDomain"
          }
        }
      },
      "title": "SamlDomainResponseList",
      "description": "Response for a list of Saml Domain objects"
    },
    "SelfRegistration": {
      "type": "object",
      "properties": {
        "lpfAllowedCertificateAuthorities": {
          "type": "array",
          "description": "Certificate authorities, accepting client certificates, allowed to use the Self Registration",
          "items": {
            "$ref": "#/definitions/SelfRegistrationCertAuthority"
          }
        },
        "lpfAllowedSocialAuthServers": {
          "type": "array",
          "description": "Social Authentication Servers allowed to use the Self Registration",
          "items": {
            "$ref": "#/definitions/SelfRegistrationSocialAuthServer"
          }
        },
        "lpfConsentRef": {
          "type": "array",
          "description": "Consent list",
          "items": {
            "$ref": "#/definitions/SelfRegistrationConsent"
          }
        },
        "lpfDirectoryRef": {
          "type": "string",
          "example": "Built-in Self-Registration Directory",
          "description": "Users Directory where to perform the self-registration"
        },
        "lpfFilterByEmailAddress": {
          "type": "boolean",
          "example": true,
          "description": "Filter users by their email address"
        },
        "lpfSelfRegCaptchaAllowed": {
          "type": "boolean",
          "example": true,
          "description": "Use Captcha"
        },
        "lpfSelfRegCheckAvailableLoginAllowed": {
          "type": "boolean",
          "example": true,
          "description": "Allow to check that the login is available"
        },
        "lpfSelfRegCheckPwdAllowed": {
          "type": "boolean",
          "example": true,
          "description": "Allow to check that the password conforms to the password quality"
        },
        "lpfSelfRegEmailWhiteList": {
          "type": "array",
          "example": "example",
          "description": "White list",
          "items": {
            "type": "string"
          }
        },
        "lpfSelfRegLoginSuggestionAllowed": {
          "type": "boolean",
          "example": true,
          "description": "Suggest a list of available logins"
        },
        "lpfValidityDurationMinutes": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "Validity duration of the link in the mail in minutes"
        },
        "lpfValidityDurationSeconds": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Validity duration of the link in the mail in seconds"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        }
      },
      "title": "SelfRegistration",
      "description": "Object definition for self registration"
    },
    "SelfRegistrationCertAuthority": {
      "type": "object",
      "properties": {
        "checkEmailAddress": {
          "type": "boolean",
          "example": true,
          "description": "Check the email address"
        },
        "name": {
          "type": "string",
          "example": "Built-in CA on juniper.test-pxp.frec.bull.fr",
          "description": "Name"
        },
        "userCaptcha": {
          "type": "boolean",
          "example": true,
          "description": "User captcha"
        }
      },
      "title": "SelfRegistrationCertAuthority",
      "description": "Object model for Self Registration Certificate Authorities"
    },
    "SelfRegistrationConsent": {
      "type": "object",
      "properties": {
        "lpfDisplayName": {
          "type": "string",
          "example": "Default consent for terms of services",
          "description": "Consent display name"
        },
        "name": {
          "type": "string",
          "example": "lpfDefaultConsent",
          "description": "Consent name"
        },
        "position": {
          "type": "string",
          "example": 1,
          "description": "Consent position"
        }
      },
      "title": "SelfRegistrationConsent",
      "description": "Object model for Self Registration consents"
    },
    "SelfRegistrationResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfSelfRegistration",
          "description": "LpfSelfRegistration type"
        },
        "body": {
          "description": "Body contains a LpfSelfRegistration object",
          "$ref": "#/definitions/SelfRegistration"
        }
      },
      "title": "SelfRegistrationResponse",
      "description": "Response for an Self Registration"
    },
    "SelfRegistrationResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfSelfRegistration",
          "description": "LpfSelfRegistration type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfSelfRegistration objects",
          "items": {
            "$ref": "#/definitions/SelfRegistration"
          }
        }
      },
      "title": "SelfRegistrationResponseList",
      "description": "Response for a list of Self Registration objects"
    },
    "SelfRegistrationSocialAuthServer": {
      "type": "object",
      "properties": {
        "checkEmailAddress": {
          "type": "boolean",
          "example": true,
          "description": "Check the email address"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Facebook Social Authentication Server",
          "description": "Name"
        },
        "name": {
          "type": "string",
          "example": "Facebook",
          "description": "Name"
        },
        "position": {
          "type": "string",
          "example": 1,
          "description": "Position"
        },
        "userCaptcha": {
          "type": "boolean",
          "example": true,
          "description": "User captcha"
        }
      },
      "title": "SelfRegistrationSocialAuthServer",
      "description": "Object model for Self Registration Social Auth Server"
    },
    "SocialAuthServer": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfAutoProvisioning": {
          "type": "boolean",
          "example": true,
          "description": "Use as directory with auto provisioning of users"
        },
        "lpfCallbackUrl": {
          "type": "string",
          "example": "http://wam.evidian:9130/pxpadmin/trust_auth",
          "description": "Callback URL"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfLogoutRedirectUrl": {
          "type": "string",
          "example": "http://wam.evidian:9130/pxpadmin/bin/social_deconnected",
          "description": "Logout Redirect URL"
        },
        "lpfNoProxy": {
          "type": "boolean",
          "example": true,
          "description": "Use the proxy"
        },
        "lpfSecret": {
          "type": "string",
          "example": "Secret",
          "description": "Secret"
        },
        "lpfSecretKey": {
          "type": "string",
          "example": "Application",
          "description": "Application ID"
        },
        "lpfUpdateProfileOnAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Update user's profile after an authentication"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        },
        "permission": {
          "description": "Users'directory permission information",
          "$ref": "#/definitions/SocialAuthServerPermission"
        },
        "unprovisioning": {
          "description": "Users'directory unprovisioning information",
          "$ref": "#/definitions/Unprovisioning"
        },
        "usersDirectory": {
          "description": "Users'directory general information",
          "$ref": "#/definitions/UserDirectoryBase"
        }
      },
      "title": "SocialAuthServer",
      "description": "Object definition for Social Auth Server"
    },
    "SocialAuthServerPermission": {
      "type": "object",
      "properties": {
        "lpfDoNotAllowPrimaryPasswordModification": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to change his primary password"
        },
        "lpfDoNotAllowPrivacyProfile": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to visualize his Privacy Profile"
        },
        "lpfDoNotAllowProfilEdition": {
          "type": "string",
          "description": "User Profile",
          "enum": [
            "ALLOWED_TO_EDIT_MODIFY_PROFILE",
            "NOT_ALLOWED_TO_EDIT_MODIFY_PROFILE",
            "ALLOWED_TO_EDIT_NOT_MODIFY_PROFILE"
          ]
        },
        "lpfDoNotAllowResetPassword": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to reset his primary password"
        },
        "lpfDoNotAllowSelfReporting": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to access End User Access Self-Reporting"
        },
        "lpfDoNotAllowSelfUnProvisioning": {
          "type": "boolean",
          "example": true,
          "description": "Does not allow the user to remove his entry in the LDAP Directory"
        },
        "lpfMaxSessionsInHistory": {
          "type": "integer",
          "format": "int32",
          "example": 16,
          "description": "Maximum number of entries in the history of the user's sessions"
        }
      },
      "title": "SocialAuthServerPermission",
      "description": "Object definition for social auth server permissions"
    },
    "SocialAuthServerResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfSocialAuthServer",
          "description": "LpfSocialAuthServer type"
        },
        "body": {
          "description": "Body contains a LpfSocialAuthServer object",
          "$ref": "#/definitions/SocialAuthServer"
        }
      },
      "title": "SocialAuthServerResponse",
      "description": "Response for a Social Auth Server"
    },
    "SocialAuthServerResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "SocialAuthServer",
          "description": "LpfSocialAuthServer type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of SocialAuthServer objects",
          "items": {
            "$ref": "#/definitions/SocialAuthServer"
          }
        }
      },
      "title": "SocialAuthServerResponseList",
      "description": "Response for a list of Social Auth Servers"
    },
    "Unprovisioning": {
      "type": "object",
      "properties": {
        "lpfAutoUnProvisioningAlertDelay": {
          "type": "array",
          "example": [
            5,
            10
          ],
          "description": "Days without authentication before sending an alert message",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "lpfAutoUnProvisioningStatus": {
          "type": "boolean",
          "example": true,
          "description": "Allow automatic unprovisioning of users"
        },
        "lpfDelayBeforeAutoUnProvisioning": {
          "type": "integer",
          "format": "int32",
          "example": 30,
          "description": "Days without authentication before user unprovisioning"
        }
      },
      "title": "Unprovisioning",
      "description": "Object definition for directory unprovisioning"
    },
    "User": {
      "type": "object",
      "properties": {
        "LpfCarLicense": {
          "type": "string",
          "example": "012345",
          "description": "Car license of the user"
        },
        "LpfCommonName": {
          "type": "string",
          "example": "John Smith",
          "description": "LDAP CN. It is automatically generated by LDAP when user is created"
        },
        "LpfDescription": {
          "type": "string",
          "example": "Description of the user",
          "description": "Description for the user"
        },
        "LpfDisplayName": {
          "type": "string",
          "example": "John Smith",
          "description": "LDAP display name"
        },
        "LpfEmployeeNumber": {
          "type": "string",
          "example": 123,
          "description": "Employee number"
        },
        "LpfEmployeeType": {
          "type": "string",
          "example": "Manager",
          "description": "Employee type"
        },
        "LpfFacsimilePhoneNumber": {
          "type": "string",
          "example": "+1 541 754 3010",
          "description": "Facsimile number of the user"
        },
        "LpfFamilyName": {
          "type": "string",
          "example": "Smith",
          "description": "Family name"
        },
        "LpfGivenName": {
          "type": "string",
          "example": "John",
          "description": "Given name"
        },
        "LpfInitials": {
          "type": "string",
          "example": "J.S.",
          "description": "Initials of the user full name"
        },
        "LpfLabeledUri": {
          "type": "string",
          "example": "Labeled URI",
          "description": "Labeled URI"
        },
        "LpfLocality": {
          "type": "string",
          "example": "New York",
          "description": "Locality name"
        },
        "LpfMail": {
          "type": "string",
          "example": "john@smith.com",
          "description": "User email"
        },
        "LpfMobile": {
          "type": "string",
          "example": "+1 541 754 3010",
          "description": "Mobile number of the user"
        },
        "LpfOrganization": {
          "type": "string",
          "example": "Atos USA",
          "description": "Organization of the user"
        },
        "LpfPhoneNumber": {
          "type": "string",
          "example": "+1 541 754 3010",
          "description": "Telephone number of the user"
        },
        "LpfPostOfficeBox": {
          "type": "string",
          "example": "P.O. Box 12345",
          "description": "Post office box of the user"
        },
        "LpfPostalCode": {
          "type": "string",
          "example": 10001,
          "description": "Postal code"
        },
        "LpfPrimaryLogin": {
          "type": "string",
          "example": "johnsmith",
          "description": "Primary login that will be used as primary key in LDAP"
        },
        "LpfPrimaryPassword": {
          "type": "string",
          "example": "********",
          "description": "User password"
        },
        "LpfSt": {
          "type": "string",
          "example": "New York",
          "description": "State"
        },
        "LpfStreet": {
          "type": "string",
          "example": "Madison Avenue",
          "description": "Street name"
        },
        "LpfTitle": {
          "type": "string",
          "example": "Mr.",
          "description": "Title of the user"
        },
        "LpfUserBirthCountry": {
          "type": "string",
          "example": "United States of America",
          "description": "Birth country of the user"
        },
        "LpfUserBirthDate": {
          "type": "string",
          "example": "17/05/1981",
          "description": "Birth date of the user"
        },
        "LpfUserBirthPlace": {
          "type": "string",
          "example": "Chicago, Illinois",
          "description": "Birth place of the user"
        },
        "LpfUserCountry": {
          "type": "string",
          "example": "United States of America",
          "description": "Country of the user"
        },
        "LpfUserGender": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Gender of the user"
        },
        "locked": {
          "type": "boolean",
          "example": false,
          "description": "Locked flag for the account state"
        },
        "lpfPersonType": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "User type"
        },
        "name": {
          "type": "string",
          "example": "johnsmith",
          "description": "Unique ideintifier for the user"
        }
      },
      "title": "User",
      "description": "Object definition for user"
    },
    "UserDirectory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        },
        "permission": {
          "description": "Users'directory permissions information",
          "$ref": "#/definitions/DirectoryPermission"
        },
        "unprovisioning": {
          "description": "Users'directory unprovisioning information",
          "$ref": "#/definitions/Unprovisioning"
        }
      },
      "title": "UserDirectory",
      "description": "Object definition for directory"
    },
    "UserDirectoryBase": {
      "type": "object",
      "properties": {
        "lpfEndUserDisplayName": {
          "type": "array",
          "example": "en:Name",
          "description": "Name (as seen by end user)",
          "items": {
            "type": "string"
          }
        },
        "lpfPasswordPolicyRef": {
          "type": "string",
          "example": "Built-in Password Policy",
          "description": "Password Policy"
        },
        "lpfPasswordQualityRef": {
          "type": "string",
          "example": "Built-in Password Quality",
          "description": "Password Quality"
        },
        "lpfUserProfileRef": {
          "type": "string",
          "example": "Default User Profile",
          "description": "User Profile"
        }
      },
      "title": "UserDirectoryBase",
      "description": "Base object definition for directory"
    },
    "UserDirectoryResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfUserDirectory",
          "description": "LpfUserDirectory type"
        },
        "body": {
          "description": "Body contains a LpfUserDirectory object",
          "$ref": "#/definitions/UserDirectory"
        }
      },
      "title": "UserDirectoryResponse",
      "description": "Response for directory"
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Description of the object",
          "description": "Description for this object"
        },
        "lpfCheckMailUnicity": {
          "type": "boolean",
          "example": true,
          "description": "Check emails to be unique"
        },
        "lpfDisplayName": {
          "type": "string",
          "example": "Display Name",
          "description": "Name to be displayed for this object"
        },
        "lpfProfileEmailWhiteList": {
          "type": "array",
          "example": [
            "john@doe.net",
            "make@dot.com"
          ],
          "description": "List of email addresses and email domains allowed to use the self-registration",
          "items": {
            "type": "string"
          }
        },
        "lpfShowAttributeMandatoryEmpty": {
          "type": "boolean",
          "example": true,
          "description": "Display in the privacy profile the empty attributes that are mandatory in the User Profile"
        },
        "lpfShowAttributeNoConfig": {
          "type": "boolean",
          "example": true,
          "description": "Display in the privacy profile the attributes that do not exist in the User Profile"
        },
        "lpfShowAttributeNotVisible": {
          "type": "boolean",
          "example": true,
          "description": "Display in the privacy profile the attributes that are set to 'Not Visible' in the User Profile"
        },
        "name": {
          "type": "string",
          "example": "lpfObject",
          "description": "Unique identifier for this object"
        },
        "profileAttributes": {
          "type": "array",
          "description": "List of Profile Attributes for the User Profile",
          "items": {
            "$ref": "#/definitions/ProfileAttribute"
          }
        }
      },
      "title": "UserProfile",
      "description": "Represents the User Profile"
    },
    "UserProfileResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "UserProfile",
          "description": "UserProfile type"
        },
        "body": {
          "description": "Body contains a UserProfile object",
          "$ref": "#/definitions/UserProfile"
        }
      },
      "title": "UserProfileResponse",
      "description": "Response for a user profile"
    },
    "UserProfileResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "UserProfile",
          "description": "User Profile type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of UserProfile objects",
          "items": {
            "$ref": "#/definitions/UserProfile"
          }
        }
      },
      "title": "UserProfileResponseList",
      "description": "Response for a list of user profiles"
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfUser",
          "description": "LpfUser type"
        },
        "body": {
          "description": "Body contains a LpfUser object",
          "$ref": "#/definitions/User"
        }
      },
      "title": "UserResponse",
      "description": "Response for an user"
    },
    "UserResponseList": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The HTTP status code of the response or custom code for the api"
        },
        "log": {
          "type": "array",
          "example": "log",
          "description": "The log if requested",
          "items": {
            "type": "string"
          }
        },
        "msg": {
          "type": "string",
          "example": "success",
          "description": "The default HTTP message of the response or default custom msg for the api, will not be translated"
        },
        "msgDefault": {
          "type": "string",
          "example": "lpf_success",
          "description": "The translated HTTP message of the response or translated custom msg for the api, constant that will be translated by wam in current user language"
        },
        "type": {
          "type": "string",
          "example": "LpfUser",
          "description": "LpfUser type"
        },
        "body": {
          "type": "array",
          "description": "Body contains an array of LpfUser objects",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "title": "UserResponseList",
      "description": "Response for a list of users"
    }
  }
}
