/* tslint:disable */

import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { DefaultHttpOptions, HttpOptions, {{&interfaceName}} } from './';
import { HttpRestService, GET, POST, DELETE, Path, PathParam, Body, QueryParam, QueryParams, ResponseObservable } from 'ngx-http-annotations';
import { Injectable } from '@angular/core';
import RestConfig from 'app/core/configs/rest.config';

{{#definitions.length}}
    import * as models from '.{{#swaggerTag}}./..{{/swaggerTag}}/models';
{{/definitions.length}}

export const USE_DOMAIN = new InjectionToken
<string>('{{&serviceName}}_USE_DOMAIN');
    export const USE_HTTP_OPTIONS = new InjectionToken
<HttpOptions>('{{&serviceName}}_USE_HTTP_OPTIONS');

    type APIHttpOptions = HttpOptions & {
    headers: HttpHeaders;
    params: HttpParams;
    };

    /**
    * Created with https://github.com/flowup/api-client-generator
    */
    @Injectable({
    providedIn: 'root'
    })
    @Path(`{{&domain}}`)
    export class {{&serviceName}} implements {{&interfaceName}} {

    constructor() {
    }

{{#methods}}
    {{#description}}
            /**
            * {{&.}}
        {{#parameters}}
                *  @parameters {{&camelCaseName}}: {{importType}}{{#isArray}}
                    []{{/isArray}},{{#description}}  :{{^isRequired}} (optional){{/isRequired}} {{&.}}{{/description}}
        {{/parameters}}
            */
    {{/description}}
        @{{methodType}}
        @path('{{&path}}')
    {{&methodName}}(
    {{#parameters.length}}
        {{#parameters}}
            {{#isPathParameter}}
                {{#isRequired}}
                    @PathParam('{{&name}}') {{&camelCaseName}}: {{importType}}{{#isArray}}[]{{/isArray}},{{#description}} //{{^isRequired}} (optional){{/isRequired}} {{&.}}{{/description}}
               {{/isRequired}}
        {{/isPathParameter}}
    {{/parameters}}
    {{#parameters}}
        {{#isBodyParameter}}
            {{#isRequired}}
                @Body('{{&name}}') {{&camelCaseName}}: {{importType}}{{#isArray}}[]{{/isArray}},{{#description}}  //{{^isRequired}} (optional){{/isRequired}} {{&.}}{{/description}}
        {{/isRequired}}
    {{/isBodyParameter}}
{{/parameters}}
        @QueryParams queryParams: {
{{#parameters}}
    {{#isQueryParameter}}
        {{&camelCaseName}}{{^isRequired}}?{{/isRequired}}: {{importType}}{{#isArray}}[]{{/isArray}},{{#description}}  //{{^isRequired}} (optional){{/isRequired}} {{&.}}{{/description}}
    {{/isQueryParameter}}
{{/parameters}}
        } = {},
{{/parameters.length}}
    @ResponseObservable res: Observable<{{&response}}> = undefined
    ): Observable<{{&response}}> {
         return null;
    }

{{/methods}}

    }
